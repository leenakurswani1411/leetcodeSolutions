Intuition
I started with brute force approach as all the time recuriter expect to write brute force then the optimised solution.

Approach
During brute force I am counting all the possible solution and adding those whos substring are homogenous and returning the size.

While in optimal solution I am checking if previous character is equals to current if yes continous counting otherwise reset the counter to 1 and adding every count into the final result variable

Complexity
Time complexity:
Brute Force - O(N*N)
Optimal Solution - O(N)

Space complexity:
Brute Force - O(N)
Optimal Solution - O(1)

Code
class Solution {
    
Brute Force :-

    public int countHomogenous(String s) {
         List<String> list = new ArrayList<>();
         for(int i = 0 ; i < s.length() ; i++){
           for(int j = i +1 ; j <= s.length() ; j++){
             String subString = s.substring(i, j);
                if(homogenous(subString)){
                   list.add(subString);
               }
            }
        }
     return list.size();
    }

    public boolean homogenous(String str){
        char ch = str.charAt(0);
        int n = str.length();
        int i = 0;
        while(i < n){
            if(str.charAt(i) != ch){
                return false;
            }
            i++;
        }
        return true;
    }



Optiomal Solution :-

    public int countHomogenous(String s) {
        int count = 0;
        int res = 0;
        for(int i = 0; i < s.length();i++){
            if( i > 0 && s.charAt(i) == s.charAt(i-1)){
                count++;
            }
            else{
                count = 1;
            }
            res = ( res + count) % 1000000007;
        }
        return res;
    }
    
}
